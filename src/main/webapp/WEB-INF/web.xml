<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!--
		1.字符编码过滤器
		用来配置页面编码，一般放在web.xml的最上面。
		其中encoding用来设置编码格式
		这是设置以后，不需要在Java源代码再写request.setCharacterEncoding("UTF-8");
	-->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<!-- /*：表示对所有请求都采用上面的编码 -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--
		2.ContextLoaderListener
		Creates the Spring Container shared by all Servlets and Filters
		Spring的容器监听器，用来让Spring来管理bean。
		contextConfigLocation：用来设置配置的文件的路径
		该属性可以不设置，默认从/WEB-INF/目录找applicationContext.xml文件。
		也可以自定义，指定配置文件的路径和名字，多个xml用逗号分隔。
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/applicationContext.xml</param-value>
		<!--
			可以采用classpath配置路径，可以使用通配符配置
			<param-value>classpath:spring/applicationContext.xml</param-value>
			applicationContext-*.xml采用通配符，比如这那个目录下有applicationContext-ibatis-base.xml
			<param-value>classpath:spring/applicationContext-*.xml</param-value>
		-->
	</context-param>
	<!--
		3.Tomcat的defaultServlet
		用来处理静态文件。
		如果Spring的DispatcherServlet，配置为拦截"/"，为了实现REST风格，是拦截了所有的请求，
		那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。
		配置tomcat的默认servlet-mapping可以放行一些静态文件。
		需要配置在要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，这样请求就不会进入Spring了。
	-->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.xml</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.json</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.map</url-pattern>
	</servlet-mapping>
	<!--
		4.SpringMVC核心分发器
		配置DispatcherServlet控制器，用于处理请求。
	-->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!--1、默认值:/WEB-INF/<servlet-name>-servlet.xml -->
			<!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value> -->
			<!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value> -->
			<!--4、多个值用逗号分隔 -->
			<param-value>/WEB-INF/spring/dispatcher/dispatcher-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 映射的请求路径，这里是任意 -->
		<!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？ -->
		<!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。 -->
		<!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。
			很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 5.会话超时配置，单位分钟 -->
	<session-config>
		<session-timeout>1</session-timeout>
	</session-config>
	<!-- 6.指定欢迎页面 -->
	<welcome-file-list>
		<welcome-file>/index</welcome-file>
	</welcome-file-list>
	<!-- 7.当系统出现404错误，跳转到页面nopage.html -->
	<error-page>
		<error-code>404</error-code>
		<location>/nopage.html</location>
	</error-page>
</web-app>